{"meta":{"title":"ナチュラル","subtitle":null,"description":"你读书，喝茶，听风，看雨，叙生，目望天涯。","author":"liaoyibin","url":""},"pages":[{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-10-15T00:10:32.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-10-15T00:10:32.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-10-15T00:10:32.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-10-15T00:10:32.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-10-15T00:10:32.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-10-15T00:10:32.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-12-20T06:20:29.147Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[ナチュラルのblnp] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"photo","date":"2019-12-20T06:15:39.000Z","updated":"2019-12-20T06:15:39.053Z","comments":false,"path":"photo/index.html","permalink":"/photo/index.html","excerpt":"","text":"","keywords":null},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-10-15T00:10:32.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-10-15T00:10:32.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-10-15T00:10:32.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-10-15T00:10:32.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-10-15T00:10:32.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"关于POI导出Excel多级表头带标题与表尾的封装方法","slug":"2019-12-18-note-3","date":"2019-12-18T08:16:01.000Z","updated":"2019-12-20T07:36:43.686Z","comments":true,"path":"2019/12/18/2019-12-18-note-3/","link":"","permalink":"/2019/12/18/2019-12-18-note-3/","excerpt":"","text":"转载请注明作者和出处：https://blog.csdn.net/qq_37165235 操作系统：WINDOWS 10 软件版本：heo+next-5.1.4 编&emsp;&emsp;者：浅歌余生 前言：关于该方法呢主要是来源于该博主提供的资料，我主要是稍微修改下并记录。额外添加的内容就是表格标题，理论上支持导出一级、二级、三级等多级表头Excel文档，测试一级、二级是OK的，先上效果图如下： &emsp;&emsp;这是导出一级表头的Excel文档效果图： &emsp;&emsp;这是导出二级表头的Excel文档效果图： 一级表头的实现&emsp;&emsp;首先呢说下一级表头是实现，从简单的开始： 先上工具类封装的统一方法： package com.ylz.packcommon.common.util; import com.ylz.bizDo.statisticalReports.vo.Record; import org.apache.commons.lang.StringUtils; import org.apache.poi.ss.usermodel.RichTextString; import org.apache.poi.ss.util.CellRangeAddress; import org.apache.poi.xssf.usermodel.*; import java.io.IOException; import java.io.OutputStream; import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.*; /*** * @ClassName: ExcelUtils * @Description:POI实现导出含多级表头和含有表尾部信息的excel * @Auther: lyb * @Date: 2019/12/17 11:21 * @version : V1.0 */ public class ExcelUtils { /** * @Author lyb * @Description //TODO 多级表头Excel文件导出 * @Date 11:24 2019/12/17 * @Param [sheetName, head, dataList, type, tableEndData，out，titles] sheet名,多级表头,导出数据,导出类型,表尾,输出文件对象,首行标题 * @return org.apache.poi.xssf.usermodel.XSSFWorkbook **/ public static XSSFWorkbook exportMultilevelHeader(String sheetName, String[][] head, List&lt;?&gt; dataList, Class type, String[][] tableEndData, OutputStream out,String titles) { /*变量*/ String[] properties; Object[] rowValue; List&lt;Object[]&gt; values; Field[] fields; XSSFCell cell; String vo; /*导出Excel*/ // 第一步，创建一个workBook，对应一个Excel文件 XSSFWorkbook wb = new XSSFWorkbook(); // 表头 标题样式 XSSFFont titleFont = wb.createFont(); titleFont.setFontName(&quot;微软雅黑&quot;);//字体 titleFont.setFontHeightInPoints((short) 15);// 字体大小 XSSFCellStyle titleStyle = wb.createCellStyle(); titleStyle.setFont(titleFont); titleStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);// 左右居中 titleStyle.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 上下居中 titleStyle.setLocked(true); // 第二步，在workBook中添加一个sheet,对应Excel文件中的sheet XSSFSheet sheet = wb.createSheet(sheetName); // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short XSSFRow row; // 第四步，创建单元格，并设置值表头 设置表头居中 //生成一个Style XSSFCellStyle style = wb.createCellStyle(); style.setWrapText(true); style.setAlignment(XSSFCellStyle.ALIGN_CENTER);//水平居中 style.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);//垂直居中 int mergerNum = 0; //合并数 //添加表格标题 sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, type.getDeclaredFields().length- 1)); row = sheet.createRow(0);//创建一行表格 row.setHeight((short) 0x349);//设置高度 cell = row.createCell(0);//创建单元格 cell.setCellStyle(titleStyle);//设置样式 cell.setCellValue(titles);//设置标题 //给单元格设置值 for (int i = 0; i &lt; head.length; i++) { row = sheet.createRow(i+1); row.setHeight((short) 700); for (int j = 0; j &lt; head[i].length; j++) { cell = row.createCell(j); cell.setCellStyle(style); cell.setCellValue(head[i][j]); } } Map&lt;Integer, List&lt;Integer&gt;&gt; map = new HashMap&lt;Integer, List&lt;Integer&gt;&gt;(); // 合并行时要跳过的行列 //合并行 for (int i = 0; i &lt; head[head.length - 1].length; i++) { if (&quot;&quot;.equals(head[head.length - 1][i])) { for (int j = head.length - 2; j &gt;= 0; j--) { if (!&quot;&quot;.equals(head[j][i])) { sheet.addMergedRegion(new CellRangeAddress(j+1, head.length, i, i)); // 合并单元格 break; } else { if (map.containsKey(j)) { List&lt;Integer&gt; list = map.get(j); list.add(i); map.put(j, list); } else { List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); list.add(i); map.put(j, list); } } } } } //合并列 for (int i = 0; i &lt; head.length - 1; i++) { for (int j = 0; j &lt; head[i].length; j++) { List&lt;Integer&gt; list = map.get(i); if (list == null || (list != null &amp;&amp; !list.contains(j))) { if (&quot;&quot;.equals(head[i][j])) { mergerNum++; if (mergerNum != 0 &amp;&amp; j == (head[i].length - 1)) { sheet.addMergedRegion(new CellRangeAddress(i, i, j - mergerNum, j)); // 合并单元格 mergerNum = 0; } } else { if (mergerNum != 0) { sheet.addMergedRegion(new CellRangeAddress(i+1, i+1, j - mergerNum - 1, j - 1)); // 合并单元格 mergerNum = 0; } } } } } //解析导出类型 Class&lt;Record&gt; recordClass = Record.class; if (null == type) { //导出失败 return null; } else if (type.equals(recordClass)) { //导出List&lt;Record&gt; //获取Record中包含的properties，用于生成表格头及创建Cell properties = getRecordProperties(dataList, null); vo = &quot;record&quot;; } else { //导出List&lt;Bean&gt; //获取Bean的Field fields = type.getDeclaredFields(); properties = getRecordProperties(null, fields); vo = &quot;bean&quot;; } if (null == head) { int i = 0; if (head.length &gt; 0) { i = head.length - 1; } head[i] = properties; } // 第五步，写入实体数据 /*表头行数*/ int m = 1; if (head.length &gt; 0) { m = head.length; } values = getRowValue(dataList, properties, vo); for (int i = 0; i &lt; dataList.size(); i++) { row = sheet.createRow(i + m+1); //创建行 rowValue = values.get(i); // 第四步，创建单元格，并设置值 for (int j = 0; j &lt; properties.length; j++) { cell = row.createCell(j); cell.setCellStyle(style); setCellValue(cell, rowValue[j]); } } //第六步，处理表格尾部的数据 if (tableEndData != null &amp;&amp; tableEndData.length &gt; 0) { for (int i = 0; i &lt; tableEndData.length; i++) { row = sheet.createRow(dataList.size() + m + i); sheet.addMergedRegion(new CellRangeAddress(dataList.size() + m + i, dataList.size() + m + i, 0, type.getDeclaredFields().length- 1)); for (int j = 0; j &lt; tableEndData[i].length; j++) { cell = row.createCell(j); cell.setCellStyle(style); setCellValue(cell, tableEndData[i][j]); } } } try { wb.write(out); out.close(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return wb; } /** * @Author lyb * @Description //TODO 获取Record包含的所有properties * @Date 11:30 2019/12/17 * @Param [list, fields] 列名,属性 * @return java.lang.String[] 包含properties **/ private static String[] getRecordProperties(List&lt;?&gt; list, Field[] fields) { if (null != list &amp;&amp; null == fields) { Record record = (Record) list.get(0); Set&lt;String&gt; keySet = record.keySet(); List&lt;String&gt; keysList = new ArrayList&lt;&gt;(keySet); return keysList.toArray(new String[keysList.size()]); } else if (null != fields &amp;&amp; null == list) { String[] properties = new String[fields.length]; for (int i = 0; i &lt; fields.length; i++) { properties[i] = fields[i].getName(); } return properties; } return new String[0]; } /** * @Author lyb * @Description //TODO 转换列表数据 * @Date 11:33 2019/12/17 * @Param [list, properties, vo] 数据列表,属性列表,类型 * @return java.util.List&lt;java.lang.Object[]&gt; 转换后的数据 **/ private static List&lt;Object[]&gt; getRowValue(List&lt;?&gt; list, String[] properties, String vo) { List&lt;Object[]&gt; resultList = new ArrayList&lt;&gt;(); Record record; if (StringUtils.isBlank(vo)) { return resultList; } else if (&quot;record&quot;.equals(vo)) { for (Object object : list) { record = (Record) object; Object[] values = new Object[properties.length]; //定义在外部数组值会被最后写入的覆盖 for (int i = 0; i &lt; properties.length; i++) { values[i] = record.get(properties[i]); } resultList.add(values); } return resultList; } else if (&quot;bean&quot;.equals(vo)) { for (Object object : list) { Class cf = object.getClass(); Object[] values = new Object[properties.length]; //定义在外部数组值会被最后写入的覆盖 for (int i = 0; i &lt; properties.length; i++) { char[] name = properties[i].toCharArray(); name[0] -= 32; try { Method method = cf.getMethod(&quot;get&quot; + String.valueOf(name)); values[i] = method.invoke(object); } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) { e.printStackTrace(); } } resultList.add(values); } return resultList; } return resultList; } /** * @Author lyb * @Description //TODO 设置单元格值 * @Date 11:34 2019/12/17 * @Param [cell, value] 单元格,值 * @return void **/ private static void setCellValue(XSSFCell cell, Object value) { if (value instanceof String) { cell.setCellValue((String) value); cell.setCellType(XSSFCell.CELL_TYPE_STRING); } else if (value instanceof Date) { cell.setCellValue((Date) value); cell.setCellType(XSSFCell.CELL_TYPE_STRING); } else if (value instanceof Boolean) { cell.setCellValue((Boolean) value); cell.setCellType(XSSFCell.CELL_TYPE_BOOLEAN); } else if (value instanceof Double) { cell.setCellValue((Double) value); cell.setCellType(XSSFCell.CELL_TYPE_NUMERIC); } else if (value instanceof Calendar) { cell.setCellValue((Calendar) value); cell.setCellType(XSSFCell.CELL_TYPE_STRING); } else if (value instanceof RichTextString) { cell.setCellValue((RichTextString) value); cell.setCellType(XSSFCell.CELL_TYPE_STRING); } else { cell.setCellValue(String.valueOf(value)); cell.setCellType(XSSFCell.CELL_TYPE_STRING); } } /** * @Author lyb * @Description //TODO 测试方法 * @Date 13:26 2019/12/19 * @Param [args] * @return void **/ public static void main(String[] args) throws Exception{ // //标题 // String titles=&quot;小脆皮&quot;; // // //表头名 // String[][] headNames = {{\"鲁班\",\"小乔\",\"安琪拉\",\"甑姬\",\"王昭君\"}}; // // //表尾名 // String[][] tableEnd = {{\"不准看： \"}}; // // List&lt;Testvo&gt; list = new ArrayList&lt;&gt;(); // for (int i=0;i&lt;5;i++) { // Testvo vo=new Testvo(); // vo.setNo(&quot;1&quot;); // vo.setName(&quot;鲁班大师&quot;); // vo.setSex(&quot;男&quot;); // vo.setAge(26); // vo.setMoney(&quot;13888&quot;); // list.add(vo); // } // // OutputStream out = new FileOutputStream(&quot;C:\\\\Users\\\\lyb\\\\Desktop\\\\测试汇总表.xls&quot;); // // //导出 // exportMultilevelHeader(&quot;测试汇总&quot;,headNames,list,Testvo.class,tableEnd,out,titles); } } &emsp;&emsp;这里有一个类需要说明下，就是Record类进行重写了，作用其实就是中间接收我们需导出数据的实体类属性，该类贴码如下： package com.ylz.bizDo.statisticalReports.vo; /*** * @ClassName: Record * @Description:该类用于POI多级表头Excel文件导出,用于接收导出实体属性 * @Auther: lyb * @Date: 2019/12/17 11:30 * @version : V1.0 */ import java.math.BigDecimal; import java.util.Date; import java.util.LinkedHashMap; public class Record extends LinkedHashMap&lt;String,Object&gt; { public void set(String field,Object value){ put(field,value); } public String getString(String field){ return (String)get(field); } public Integer getInteger(String field){ return (Integer)get(field); } public Long getLong(String field){ return (Long)get(field); } public BigDecimal getBigDecimal(String field){ return (BigDecimal)get(field); } public Date getDate(String field){ return (Date)get(field); } public Boolean getBoolean(String field){ return (Boolean) get(field); } } &emsp;&emsp;然后呢就是一级表头文档导出的测试方法了： public static void main(String[] args) throws Exception{ //标题 String titles=&quot;小脆皮&quot;; //表头名 String[][] headNames = {{\"鲁班\",\"小乔\",\"安琪拉\",\"甑姬\",\"王昭君\"}}; //表尾名 String[][] tableEnd = {{\"不准看： \"}}; List&lt;Testvo&gt; list = new ArrayList&lt;&gt;(); for (int i=0;i&lt;5;i++) { Testvo vo=new Testvo(); vo.setNo(&quot;1&quot;); vo.setName(&quot;鲁班大师&quot;); vo.setSex(&quot;男&quot;); vo.setAge(26); vo.setMoney(&quot;13888&quot;); list.add(vo); } OutputStream out = new FileOutputStream(&quot;C:\\\\Users\\\\lyb\\\\Desktop\\\\测试汇总表.xls&quot;); //导出 exportMultilevelHeader(&quot;测试汇总&quot;,headNames,list,Testvo.class,tableEnd,out,titles); } &emsp;&emsp;至于TestVo类就不需要我贴了吧，只是一个测试类只有get、set方法，属性就循环的那些。 &emsp;&emsp;至于二级表头的测试方法如下，主要内容都在工具类里面。基本上都有写注释相信应该可以看明白。 /** * @Author lyb * @Description //TODO 家庭签约登记统计Excel导出 * @Date 9:43 2019/12/17 * @Param [] * @return java.lang.String **/ public String findRegistrationStatisticalToExcel() { try { //查询条件 RegistrationListQvo qvo = (RegistrationListQvo) getJsonLay(RegistrationListQvo.class); if(qvo==null){ qvo=new RegistrationListQvo(); } //登录人信息 CdUser user = this.getSessionUser(); //导出数据 List&lt;RegistrationStatisticalExportVo&gt; listData = sysDao.getStattisticalReportsDao().registrationListExport(qvo); //Excel导出标题 String titles = &quot;登记表&quot;; //表头名 String[][] headNames = {{\"姓名\",\"性别\",\"身份证号\",\"联系电话\",\"签约编码\",\"签约家庭类别\", \"\", \"\", \"\", \"\",\"\",\"\", \"重点人群签约服务项目\", \"\",\"\",\"\",\"\",\"\",\"\", \"其他人群\", \"\",\"\",\"\",\"\",\"签约服务包类型\",\"备注\"}, {\"\",\"\",\"\",\"\",\"\",\"计生失独伤残家庭\", \"计生独生子女\", \"计生双女\", \"五保户\", \"低保户\",\"建档立卡贫困人口\",\"其他\", \"老年人\",\"高血压患者\",\"2型糖尿病患者\",\"严重精神障碍患者\",\"结核病患者\",\"孕产妇\",\"0-6岁儿童\", \"残疾人\", \"脑血管病患者\", \"冠心病患者\",\"癌症患者\",\"其他\",\"\",\"\"}}; //表尾名 String[][] tableEnd = {{\"填报人: 分管院长： 填报时间： 年 月 日\"}}; getResponse().reset(); getResponse().setContentType(&quot;application/vnd..ms-excel&quot;); getResponse().setHeader(&quot;content-Disposition&quot;,&quot;attachment;filename=&quot;+ URLEncoder.encode(&quot;汇总表.xls&quot;,&quot;utf-8&quot;)); ExcelUtils.exportMultilevelHeader(&quot;汇总表&quot;,headNames,listData, RegistrationStatisticalExportVo.class,tableEnd,getResponse().getOutputStream(),titles); }catch (Exception e) { e.printStackTrace(); new ActionException(getClass(), getAct(), getJsons(), e); } return null; } 代码什么的都已经贴完了，也没别的东西了。 本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～ 哇咔咔(∪｡∪)｡｡｡zzz","categories":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}],"tags":[{"name":"note","slug":"note","permalink":"/tags/note/"}],"keywords":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}]},{"title":"关于layUI多级表头","slug":"2019-12-18-note-2","date":"2019-12-18T03:16:01.000Z","updated":"2019-12-20T07:35:49.555Z","comments":true,"path":"2019/12/18/2019-12-18-note-2/","link":"","permalink":"/2019/12/18/2019-12-18-note-2/","excerpt":"","text":"转载请注明作者和出处：https://blog.csdn.net/qq_37165235 操作系统：WINDOWS 10 软件版本：heo+next-5.1.4 编&emsp;&emsp;者：浅歌余生 错误原因：&emsp;&emsp;记录下使用layUI多级表头时犯的一个错误，其实主要原因是我多写了一个逗号 “ , ” 导致报错的，我的表格只有2级表头，在第二级时多写了一个逗号 错误提示：layui.all.js?v=1.1.1:179 Laytpl Error：TypeError: Cannot read property &#39;fixed&#39; of undefined &lt;div class=&quot;layui-form layui-border-box {{d.VIEW_CLASS}}&quot; lay-filter=&quot;LAY-table-{{d.index}}&quot; style=&quot;{ if(item2.rowspan){}} rowspan=&quot;{{item2.rowspan}}&quot;{ if(item2.rowspan){}} rowspan=&quot;{{item2.rowspan}}&quot;{ if(item2.rowspan){}} rowspan=&quot;{{item2.rowspan}}&quot;{}}&gt;&lt;span&gt;{{item2.title||\"\"}}&lt;/span&gt;&lt;/div&gt;{}}&gt;&lt;span&gt;{{item2.title||\"\"}}&lt;/span&gt;{ if(item2.rowspan){}} rowspan=&quot;{{item2.rowspan}}&quot;{ if(item2.rowspan){}} rowspan=&quot;{{item2.rowspan}}&quot;{ if(item2.rowspan){}} rowspan=&quot;{{item2.rowspan}}&quot;{}}&gt;&lt;span&gt;{{item2.title||\"\"}}&lt;/span&gt;&lt;/div&gt;{}}&gt;&lt;span&gt;{{item2.title||\"\"}}&lt;/span&gt;{ if(item2.rowspan){}} rowspan=&quot;{{item2.rowspan}}&quot;{ if(item2.rowspan){}} rowspan=&quot;{{item2.rowspan}}&quot;{ if(item2.rowspan){}} rowspan=&quot;{{item2.rowspan}}&quot;{}}&gt;&lt;span&gt;{{item2.title||\"\"}}&lt;/span&gt;&lt;/div&gt;{}}&gt;&lt;span&gt;{{item2.title||\"\"}}&lt;/span&gt;{{# if(item2.sort){ }}&lt;span class=&quot;layui-table-sort layui-inline&quot;&gt;&lt;i class=&quot;layui-edge layui-table-sort-asc&quot;&gt;&lt;/i&gt;&lt;i class=&quot;layui-edge layui-table-sort-desc&quot;&gt;&lt;/i&gt;&lt;/span&gt;{{# } }}&lt;/div&gt;{{# } }}&lt;/th&gt;{{# }; }}{{# }; }}{{# }); }}&lt;/tr&gt;{{# }); }}&lt;/thead&gt;&lt;/table&gt;&lt;div class=&quot;layui-table-mend&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;layui-table-body&quot;&gt;&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; class=&quot;layui-table&quot; {{# if(d.data.skin){ }}lay-skin=&quot;{{d.data.skin}}&quot;{{# } }} {{# if(d.data.size){ }}lay-size=&quot;{{d.data.size}}&quot;{{# } }} {{# if(d.data.even){ }}lay-even{{# } }}&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;{{# }; }}{{# if(d.data.page){ }}&lt;div class=&quot;layui-table-tool&quot;&gt;&lt;div class=&quot;layui-inline layui-table-page&quot; id=&quot;layui-table-page{{d.index}}&quot;&gt;&lt;/div&gt;&lt;/div&gt;{{# } }}&lt;style&gt;{{# layui.each(d.data.cols, function(i1, item1){layui.each(item1, function(i2, item2){ }}.laytable-cell-{{d.index}}-{{item2.field||i2}}{ width:{{item2.width||50}}px }{{# });}); }}&lt;/style&gt;&lt;/div&gt; error @ layui.all.js?v=1.1.1:179 t.pt.parse @ layui.all.js?v=1.1.1:199 t.pt.render @ layui.all.js?v=1.1.1:203 H.render @ layui.all.js?v=1.1.1:4722 H @ layui.all.js?v=1.1.1:4706 d.render @ layui.all.js?v=1.1.1:5048 listRegistration @ sign_regisrationCountList.js?v=1.1.3:21 onclick @ sign_regisrationCountList.jsp?1=1&amp;loginMenuId=01ffadb7-0a28-4f89-9c6d-aadf1dcf3934:91 layui.all.js?v=1.1.1:1807 Uncaught Error: Syntax error, unrecognized expression: Laytpl Error：TypeError: Cannot read property &#39;fixed&#39; of undefined at Function.t.error (layui.all.js?v=1.1.1:1807) at t.tokenize (layui.all.js?v=1.1.1:1989) at t.select (layui.all.js?v=1.1.1:1998) at Function.t [as find] (layui.all.js?v=1.1.1:1514) at pe.fn.init.find (layui.all.js?v=1.1.1:2049) at new pe.fn.init (layui.all.js?v=1.1.1:2063) at pe (layui.all.js?v=1.1.1:1377) at H.render (layui.all.js?v=1.1.1:4722) at new H (layui.all.js?v=1.1.1:4706) at Object.d.render (layui.all.js?v=1.1.1:5048) t.error @ layui.all.js?v=1.1.1:1807 t.tokenize @ layui.all.js?v=1.1.1:1989 t.select @ layui.all.js?v=1.1.1:1998 t @ layui.all.js?v=1.1.1:1514 find @ layui.all.js?v=1.1.1:2049 pe.fn.init @ layui.all.js?v=1.1.1:2063 pe @ layui.all.js?v=1.1.1:1377 H.render @ layui.all.js?v=1.1.1:4722 H @ layui.all.js?v=1.1.1:4706 d.render @ layui.all.js?v=1.1.1:5048 listRegistration @ sign_regisrationCountList.js?v=1.1.3:21 onclick @ sign_regisrationCountList.jsp?1=1&amp;loginMenuId=01ffadb7-0a28-4f89-9c6d-aadf1dcf3934:91 主要代码：table.render({ height:&#39;400&#39; ,elem: &#39;#registration&#39; ,cols: [ //一级表头 [ {rowspan: 2,field: &#39;myIndex&#39;,title: &#39;序号&#39;,width: 60, align: &quot;center&quot;} ,{rowspan: 2,field: &#39;patientName&#39;, title: &#39;姓名&#39;, width: 60, align: &quot;center&quot;} ,{rowspan: 2,field: &#39;patientGender&#39;, title: &#39;性别&#39;, width: 60, align: &quot;center&quot;} ,{rowspan: 2,field: &#39;patientIdNo&#39;, title: &#39;身份证&#39;, width: 180, align: &quot;center&quot;} ,{rowspan: 2,field:&#39;signNum&#39;, title: &#39;签约编码&#39;, width: 100, align: &quot;center&quot;} ,{rowspan: 2,field: &#39;patientTel&#39;, title: &#39;联系电话&#39;, width: 120, align: &quot;center&quot;} ,{title: &#39;签约家庭类别&#39;, colspan:7} ,{title: &#39;重点人群签约服务项目数&#39;, colspan:7} ,{title: &#39;其他人群&#39;, colspan:5} ,{rowspan: 2,field: &#39;serpkName&#39;, title: &#39;签约服务包类型&#39;, width: 100, align: &quot;center&quot;} ,{rowspan: 2,field: &#39;remark&#39;, title: &#39;备注&#39;, width: 80, align: &quot;center&quot;} ] //二级表头 ,[ //签约家庭类别 {field:&#39;disabilitiesInFamily&#39;, title: &#39;计生失独伤残家庭&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;familyOnlyChild&#39;, title: &#39;计生独生子女&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;familyPlanningTwoWomen&#39;, title: &#39;计生双女&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;fiveInsuredHouseholds&#39;, title: &#39;五保户&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;lowInsuredHouseholds&#39;, title: &#39;低保户&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;fileCardPoor&#39;, title: &#39;建档立卡贫困人口&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;hsOther&#39;, title: &#39;其他&#39;, width: 70, align: &quot;center&quot;} //重点人群签约服务项目数 ,{field:&#39;elderly&#39;, title: &#39;老年人&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;patientsWithHypertension&#39;, title: &#39;高血压患者&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;typeTwoDiabetes&#39;, title: &#39;2型糖尿病患者&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;patientsWithMentalDisorders&#39;, title: &#39;严重精神障碍患者&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;tuberculosisPatients&#39;, title: &#39;结核病患者&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;maternal&#39;, title: &#39;孕产妇&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;childernAgedZeroToSix&#39;, title: &#39;0-6岁儿童&#39;, width: 70, align: &quot;center&quot;} //其他人群 ,{field:&#39;disabled&#39;, title: &#39;残疾人&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;patientsWithCereBrovascularDisease&#39;, title: &#39;脑血管病患者&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;coronaryHeartDiseasePatients&#39;, title: &#39;冠心病患者&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;cancerPatients&#39;, title: &#39;癌症患者&#39;, width: 70, align: &quot;center&quot;} ,{field:&#39;others&#39;, title: &#39;其他&#39;, width: 70, align: &quot;center&quot;} ] ] ,id: &#39;registration&#39; ,url: &#39;statisticalReportsAction.action&#39; ,where: {act: &#39;registrationStatisticalList&#39;,strJson:JSON.stringify(qvo)} ,method: &#39;post&#39; ,skin: &#39;row&#39; //表格风格 ,even: true ,page: true //是否显示分页 ,limits: [5,10,15,20,25,50,100,200] ,limit: 10 //每页默认显示的数量 ,done: function(res, curr, count){ if (res.data != null) { vos = res.data; numberCount = res.data.length; } // //遮罩关闭 // layer.close(index); } }); 本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～ 哇咔咔(∪｡∪)｡｡｡zzz","categories":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}],"tags":[{"name":"note","slug":"note","permalink":"/tags/note/"}],"keywords":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}]},{"title":"Markdown代码块语法的血泪史","slug":"2019-12-18-note-1","date":"2019-12-18T02:16:01.000Z","updated":"2019-12-20T07:31:18.927Z","comments":true,"path":"2019/12/18/2019-12-18-note-1/","link":"","permalink":"/2019/12/18/2019-12-18-note-1/","excerpt":"","text":"转载请注明作者和出处：https://blog.csdn.net/qq_37165235 操作系统：WINDOWS 10 软件版本：heo+next-5.1.4 编&emsp;&emsp;者：浅歌余生 前言：Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 1、“`”语法的说明&emsp;&emsp;关于 ` 语法的作用相信都知道吧，就是声明一块空间用于代码使用的。但是呢我这小白刚使用Markdown语法时，踩到的坑真的是要我飙血三升啊╮(╯﹏╰）╭为什么这么说嘞，下面让我来一一陈述吧。 2、“血泪史”啊&emsp;&emsp;刚一开始我是使用Markdownpad2来写md文章的，因为比较简洁看着舒服，在我写博客的时候贴了些代码用于陈述所说观点，所以使用到了 ` 语法。话不多说问题如下： 2.1、关于“`”和“~~~”的区别及异常&emsp;&emsp;两个标签的实现效果是一样的，如图所示： 异常： 1、“~~~”无法标记代码块内的语言类型，“`”可以标记 2、“~~~”无法结束代码块语法的声明 暂时是只发现了这两个异常，另外个人建议写md文档不推荐使用Markdownpad2编辑器，感觉太多坑了。我主要用它也是用来写博客的，不清楚是不是因为版本的原因 2.2、“`”使用注意&emsp;&emsp;在使用该语法时开头之前必须要有一行空行，若要标记语言则在开头语法加一个空格然后声明语言类型(具体如图所示)，既然开头有要求自然结束也有要求的。结束时切忌不要在结束标签后加空格，否则该标签未关闭。关闭则直接回车换两行即可。这就是让我痛不欲生错误啊，该问题在编译器里是看不出异常的，编译器里预览效果都是正常的包括直接用浏览器预览也是正常的，但实际并不是这样的，当你生成hexo博客后就会发现异常。下面带图说话：&emsp;&emsp;使用注意： 标记语言只是让代码高亮 若格式不是这样的效果则是这样，如图所示： 上图可见不是这种写法则代码块声明无法关闭，则后续所有标签都不生效直接进入了代码块空间内。 踩得坑呢就这些，但是那个关闭标签是真的我超头疼，还好发现了，特地记下分享分享。O(∩_∩)O哈哈~当然要是各位大佬有其他意见或者看法一定得告诉我，好让我快点追上大佬的脚本☆￣(＞。☆) 本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～ 哇咔咔(∪｡∪)｡｡｡zzz","categories":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}],"tags":[{"name":"note","slug":"note","permalink":"/tags/note/"}],"keywords":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}]},{"title":"关于Oracle的Merge的用法","slug":"2019-12-12-note-4","date":"2019-12-12T08:05:01.000Z","updated":"2019-12-20T07:34:12.963Z","comments":true,"path":"2019/12/12/2019-12-12-note-4/","link":"","permalink":"/2019/12/12/2019-12-12-note-4/","excerpt":"","text":"转载请注明作者和出处：https://blog.csdn.net/qq_37165235 操作系统：WINDOWS 10 软件版本：heo+next-5.1.4 编&emsp;&emsp;者：浅歌余生 话不多说直接记录！(^_−)☆ 自动判断是新增还是修改的关键字： MERGE INTO MERGE 语法： MERGE INTO [your table-name] [rename your table here] USING ( [write your query here] )[rename your query-sql and using just like a table] ON ([conditional expression here] AND [...]...) WHEN MATCHED THEN [here you can execute some update sql or something else ] WHEN NOT MATCHED THEN [execute something else here ! ] 例如我们想插入一条数据 {ID=2,NAME=’newtest2’} 那么可以这么写： MERGE INTO TEST T1 USING (SELECT &#39;2&#39; as ID, &#39;newtest2&#39; as NAME FROM dual) T2 on (T1.ID=T2.ID) WHEN MATCHED THEN UPDATE SET T1.NAME=T2.NAME WHEN NOT MATCHED THEN INSERT (T1.ID, T1.NAME) VALUES (T2.ID, T2.NAME ); 注意：&emsp;&emsp;Merge Into的原理是，从using 搜出来的结果逐条与on条件匹配，然后决定是update还是Insert。 当USING后面的sql没有查询到数据的时候，Merge Into语句是不会执行update和Insert操作的。所以要想让Merge Into正常运行，要保证USING 后面的SELECT有数据，个人喜欢使用DUAL表作为USING后的表，方便自己控制 本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～ 哇咔咔(∪｡∪)｡｡｡zzz","categories":[{"name":"DataBase","slug":"DataBase","permalink":"/categories/DataBase/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"/tags/oracle/"}],"keywords":[{"name":"DataBase","slug":"DataBase","permalink":"/categories/DataBase/"}]},{"title":"关于java实体的几个概念","slug":"2019-12-12-note-3","date":"2019-12-12T06:05:01.000Z","updated":"2019-12-20T07:33:01.025Z","comments":true,"path":"2019/12/12/2019-12-12-note-3/","link":"","permalink":"/2019/12/12/2019-12-12-note-3/","excerpt":"","text":"转载请注明作者和出处：https://blog.csdn.net/qq_37165235 操作系统：WINDOWS 10 软件版本：heo+next-5.1.4 编&emsp;&emsp;者：浅歌余生 &emsp;&emsp;由于不同的项目和开发人员有不同的命名习惯，这里我首先对上述的概念进行一个简单描述，名字只是个标识，我们重点关注其概念： 概念&emsp;&emsp;VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。 DTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。 DO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。 PO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。 模型图 用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。 展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。 服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。 服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。 对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。 概念解析：&emsp;&emsp;得出的主要结论是：在项目应用中，VO对应于页面上需要显示的数据（表单），DO对应于数据库中存储的数据（数据表），DTO对应于除二者之外需要进行传递的数据。 一、实体类&emsp;&emsp;百度百科中对于实体类的定义如下：实体类的主要职责是存储和管理系统内部的信息，它也可以有行为，甚至很复杂的行为，但这些行为必须与它所代表的实体对象密切相关。根据以上定义，我们可以了解到，实体类有两方面内容，存储数据和执行数据本身相关的操作。这两方面内容对应到实现上，最简单的实体类是POJO类，含有属性及属性对应的set和get方法，实体类常见的方法还有用于输出自身数据的toString方法。 二、领域模型中的实体类&emsp;&emsp;领域模型中的实体类分为四种类型：VO、DTO、DO、PO，各种实体类用于不同业务层次间的交互，并会在层次内实现实体类之间的转化。业务分层为：视图层（VIEW+ACTION），服务层（SERVICE），持久层（DAO）相应各层间实体的传递如下图： &emsp;&emsp;项目中我们并没有严格遵循这种传递关系，但这种和业务层次的关联对我们理解各实体类的作用是有帮助的。（我们没有接触到PO的原因，我理解为ORM对PO进行了封装）以下是资料的原文，上图是基于此绘制的：概念： VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。 DTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。 DO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。 PO（PersistentObject）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。 模型： 下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置 l 用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。 l 展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。 l 服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。 l服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。 l 对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。 三、项目中的实体类&emsp;&emsp;项目中常见的实体类有VO，DO和DTO，命名规则也常是以相应字符串结尾，如VO.Java。但是DTO不总是遵循这个规则，而通常与他的用途有关，如写成Query.java，表示存储了一个查询条件。项目中实体类出现的业务层次也没有这么严格，例如我们可以在视图层就组装一个DO，也可以将一个VO从持久层传出来，所以与业务分层相关联的划分方法显得有些冗余。从项目代码中抽象出的理解是：VO对应于页面上需要显示的数据，DO对应于数据库中存储的数据，DTO对应于除二者之外需要进行传递的数据。 本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～ 哇咔咔(∪｡∪)｡｡｡zzz","categories":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}],"tags":[{"name":"note","slug":"note","permalink":"/tags/note/"}],"keywords":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}]},{"title":"Spring相关的6个注解探寻路","slug":"2019-12-12-note-2","date":"2019-12-12T05:10:01.000Z","updated":"2019-12-20T07:31:44.280Z","comments":true,"path":"2019/12/12/2019-12-12-note-2/","link":"","permalink":"/2019/12/12/2019-12-12-note-2/","excerpt":"","text":"转载请注明作者和出处：https://blog.csdn.net/qq_37165235 操作系统：WINDOWS 10 软件版本：heo+next-5.1.4 编&emsp;&emsp;者：浅歌余生 在这里梳理了在项目中与Spring Boot注解配合最为紧密的6个Spring基础框架的注解。如👇 1、@Configuration&emsp;&emsp;从Spring3.0，@Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。 代码示例@Configuration public class TaskAutoConfiguration { @Bean @Profile(&quot;biz-electrfence-controller&quot;) public BizElectrfenceControllerJob bizElectrfenceControllerJob() { return new BizElectrfenceControllerJob(); } @Bean @Profile(&quot;biz-consume-1-datasync&quot;) public BizBikeElectrFenceTradeSyncJob bizBikeElectrFenceTradeSyncJob() { return new BizBikeElectrFenceTradeSyncJob(); } } 2、@ComponentScan&emsp;&emsp;做过web开发的同学一定都有用过@Controller，@Service，@Repository注解，查看其源码你会发现，他们中有一个共同的注解@Component，没错@ComponentScan注解默认就会装配标识了@Controller，@Service，@Repository，@Component注解的类到spring容器中。 示例@ComponentScan(value = &quot;com.abacus.check.api&quot;) public class CheckApiApplication { public static void main(String[] args) { SpringApplication.run(CheckApiApplication.class, args); } } @SpringBootApplication注解也包含了@ComponentScan注解，所以在使用中我们也可以通过@SpringBootApplication注解的scanBasePackages属性进行配置。 示例@SpringBootApplication(scanBasePackages = { &quot;com.abacus.check.api&quot;, &quot;com.abacus.check.service&quot;} ) public class CheckApiApplication { public static void main(String[] args) { SpringApplication.run(CheckApiApplication.class, args); } } 3、@Conditional&emsp;&emsp;@Conditional是Spring4新提供的注解，通过@Conditional注解可以根据代码中设置的条件装载不同的bean，在设置条件注解之前，先要把装载的bean类去实现Condition接口，然后对该实现接口的类设置是否装载的条件。Spring Boot注解中的@ConditionalOnProperty、@ConditionalOnBean等以@Conditional*开头的注解，都是通过集成了@Conditional来实现相应功能的。 @Conditional的定义：//此注解可以标注在类和方法上 @Target({ElementType.TYPE, ElementType.METHOD }) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Conditional { Class&lt;?extends Condition&gt;[] value(); } 从代码中可以看到，需要传入一个Class数组，并且需要继承Condition接口： public interface Condition { boolean matches(ConditionContext var1, AnnotatedTypeMetadata var2); } Condition是个接口，需要实现matches方法，返回true则注入bean，false则不注入。 示例： 首先，创建Person类：` javapublic class Person { private String name; private Integer age; public Person(String name, Integer age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } @Override public String toString() { return &quot;Person{&quot; + &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; + &quot;, age=&quot; + age + &#39;}&#39;; } } &gt;创建BeanConfig类，用于配置两个Person实例并注入，一个是比尔盖茨，一个是林纳斯。 ``` java @Configuration public class BeanConfig { @Bean(name = &quot;bill&quot;) public Person person1() { return new Person(&quot;Bill Gates&quot;, 62); } @Bean(&quot;linus&quot;) public Person person2() { return new Person(&quot;Linus&quot;, 48); } } 接着写一个测试类进行验证这两个Bean是否注入成功。 public class ConditionalTest { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(BeanConfig.class); @Test public void test1() { Map&lt;String, Person&gt; map = applicationContext.getBeansOfType(Person.class); System.out.println(map); } } 运行，输出结果是这样的，两个Person实例被注入进容器。运行，输出结果是这样的，两个Person实例被注入进容器。 {bill=Person{name=&#39;Bill Gates&#39;,age=62},linus=Person={name=&#39;Linus&#39;,age=48}} 这是一个简单的例子，现在问题来了，如果我想根据当前操作系统来注入Person实例，windows下注入bill，linux下注入linus，怎么实现呢？ 这就需要我们用到@Conditional注解了，前言中提到，需要实现Condition接口，并重写方法来自定义match规则。 首先，创建一个WindowsCondition类： public class WindowsCondition implements Condition { /** * @param conditionContext:判断条件能使用的上下文环境 * @param annotatedTypeMetadata:注解所在位置的注释信息 * */ @Override public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) { //获取ioc使用的beanFactory ConfigurableListableBeanFactory beanFactory = conditionContext.getBeanFactory(); //获取类加载器 ClassLoader classLoader = conditionContext.getClassLoader(); //获取当前环境信息 Environment environment = conditionContext.getEnvironment(); //获取bean定义的注册类 BeanDefinitionRegistry registry = conditionContext.getRegistry(); //获得当前系统名 String property = environment.getProperty(&quot;os.name&quot;); //包含Windows则说明是windows系统，返回true if (property.contains(&quot;Windows&quot;)) { return true; } return false; } } matches方法的两个参数的意思在注释中讲述了，值得一提的是，conditionContext提供了多种方法，方便获取各种信息，也是SpringBoot中 @ConditonalOnXX注解多样扩展的基础。 接着，创建LinuxCondition类： public class LinuxCondition implements Condition { @Override public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) { Environment environment = conditionContext.getEnvironment(); String property = environment.getProperty(&quot;os.name&quot;); if (property.contains(&quot;Linux&quot;)) { return true; } return false; } } 接着就是使用这两个类了，因为此注解可以标注在方法上和类上，所以分开测试： 标注在方法上：修改BeanConfig： @Configuration public class BeanConfig { //只有一个类时，大括号可以省略 //如果WindowsCondition的实现方法返回true，则注入这个bean @Conditional({WindowsCondition.class }) @Bean(name = &quot;bill&quot;) public Person person1() { return new Person(&quot;Bill Gates&quot;, 62); } //如果LinuxCondition的实现方法返回true，则注入这个bean @Conditional({LinuxCondition.class }) @Bean(&quot;linus&quot;) public Person person2() { return new Person(&quot;Linus&quot;, 48); } } 修改测试方法，使其可以打印当前系统名：运行结果如下： 当前系统为：Windows 10 {bill=Person{name=&#39;Bill Gates&#39;,age=62}} 接着测试在Linux系统，由于是Windows系统所以直接修改运行参数： 修改参数 VM option: -Dos.name=Linux 修改后启动测试 当前系统为：Linux {linus=Person={name=&#39;Linus&#39;,age=48}} 一个方法只能注入一个bean实例，所以@Conditional标注在方法上只能控制一个bean实例是否注入。 标注在类上：&emsp;&emsp;一个类中可以注入很多实例，@Conditional标注在类上就决定了一批bean是否注入。我们试一下，将BeanConfig改写，这时，如果WindowsCondition返回true，则两个Person实例将被注入(注意：上一个测试将os.name改为linux，这是我将把这个参数去掉)： @Conditional({WindowsCondition.class }) @Configuration public class BeanConfig { @Bean(name = &quot;bill&quot;) public Person person1() { return new Person(&quot;Bill Gates&quot;, 62); } @Bean(&quot;linus&quot;) public Person person2() { return new Person(&quot;Linus&quot;, 48); } } 结果两个实例都被注入： {bill=Person={name=&#39;Bill Gates&#39;,age=62},linus=Person={name=&#39;Linus&#39;,age=48}} 如果将类上的WindowsCondition.class改为LinuxCondition.class，结果应该可以猜到： {} 结果就是空的，类中所有bean都没有注入。 多个条件类：&emsp;&emsp;前言中说，@Conditional注解传入的是一个Class数组，存在多种条件类的情况。这种情况貌似判断难度加深了，测试一波，新增新的条件类，实现的matches返回false（这种写死返回false的方法纯属测试用，没有实际意义O(∩_∩)O） public class ObstinateCondition implements Condition { @Override public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) { return false; } } BeanConfig修改一下： @Conditional({WindowsCondition.class, ObstinateCondition.class }) @Configuration public class BeanConfig { @Bean(name = &quot;bill&quot;) public Person person1() { return new Person(&quot;Bill Gates&quot;, 62); } @Bean(&quot;linus&quot;) public Person person2() { return new Person(&quot;Linus&quot;, 48); } } 结论得: 第一个条件类实现的方法返回true，第二个返回false，则结果false，不注入进容器。 第一个条件类实现的方法返回true，第二个返回true，则结果true，注入进容器中。 4、@Import&emsp;&emsp;通过导入的方式实现把实例加入springIOC容器中。可以在需要时将没有被Spring容器管理的类导入至Spring容器中。 //类定义 public class Square {} public class Circular {} //导入 @Import({Square.class,Circular.class}) @Configuration public class MainConfig{} 5、@ImportResource&emsp;&emsp;和@Import类似，区别就是@ImportResource导入的是配置文件。 @ImportResource(&quot;classpath:spring-redis.xml&quot;) //导入xml配置 public class CheckApiApplication { public static void main(String[] args) { SpringApplication.run(CheckApiApplication.class, args); } } 6、@Component&emsp;&emsp;@Component是一个元注解，意思是可以注解其他类注解，如@Controller @Service @Repository。带此注解的类被看作组件，当使用基于注解的配置和类路径扫描的时候，这些类就会被实例化。其他类级别的注解也可以被认定为是一种特殊类型的组件，比如@Controller 控制器（注入服务）、@Service服务（注入dao）、@Repository dao（实现dao访问）。@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注，作用就相当于 XML配置，。 Spring Boot最核心的20个注解 1、@SpringBootApplication&emsp;&emsp;这个注解是Spring Boot最核心的注解，用在 Spring Boot的主类上，标识这是一个 Spring Boot 应用，用来开启 Spring Boot 的各项能力。实际上这个注解是@Configuration,@EnableAutoConfiguration,@ComponentScan三个注解的组合。由于这些注解一般都是一起使用，所以Spring Boot提供了一个统一的注解@SpringBootApplication。 @SpringBootApplication(exclude = { MongoAutoConfiguration.class, MongoDataAutoConfiguration.class, DataSourceAutoConfiguration.class, ValidationAutoConfiguration.class, MybatisAutoConfiguration.class, MailSenderAutoConfiguration.class, } ) public class API { public static void main(String[] args) { SpringApplication.run(API.class, args); } } 2、@EnableAutoConfiguration&emsp;&emsp;允许 Spring Boot 自动配置注解，开启这个注解之后，Spring Boot 就能根据当前类路径下的包或者类来配置 Spring Bean。如：当前类路径下有 Mybatis 这个 JAR 包，MybatisAutoConfiguration 注解就能根据相关参数来配置 Mybatis 的各个 Spring Bean。&emsp;&emsp;@EnableAutoConfiguration实现的关键在于引入了AutoConfigurationImportSelector，其核心逻辑为selectImports方法，逻辑大致如下： 从配置文件META-INF/spring.factories加载所有可能用到的自动配置类； 去重，并将exclude和excludeName属性携带的类排除； 过滤，将满足条件（@Conditional）的自动配置类返回； @Target({ElementType.TYPE }) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @AutoConfigurationPackage //导入AutoConfigurationImportSelector的子类@Import({EnableAutoConfigurationImportSelector.class}) public @interface EnableAutoConfiguration { String ENABLED_OVERRIDE_PROPERTY = &quot;spring.boot.enableautoconfiguration&quot; ; Class&lt;?&gt;[] exclude() default { } ; String[] excludeName() default { } ; } 3、@SpringBootConfiguration&emsp;&emsp;这个注解就是 @Configuration 注解的变体，只是用来修饰是 Spring Boot 配置而已，或者可利于 Spring Boot 后续的扩展。 4、@ConditionalOnBean&emsp;&emsp;@ConditionalOnBean(A.class)仅仅在当前上下文中存在A对象时，才会实例化一个Bean，也就是说只有当A.class 在spring的applicationContext中存在时，这个当前的bean才能够创建。 @Bean //当前环境上下文存在DefaultMQProducer实例时，才能创建RocketMQProducerLifecycle这个Bean @ConditionalOnBean(DefaultMQProducer.class) public RocketMQProducerLifecycle rocketMQLifecycle() { return new RocketMQProducerLifecycle(); } 5、@ConditionalOnMissingBean 组合@Conditional注解，和@ConditionalOnBean注解相反，仅仅在当前上下文中不存在A对象时，才会实例化一个Bean。 @Bean //仅当当前环境上下文缺失RocketMQProducer对象时，才允许创建RocketMQProducer Bean对象 @ConditionalOnMissingBean(RocketMQProducer.class) public RocketMQProducer mqProducer() { return new RocketMQProducer(); } 6、@ConditionalOnClass 组合 @Conditional 注解，可以仅当某些类存在于classpath上时候才创建某个Bean。 @Bean //当classpath中存在类HealthIndicator时，才创建HealthIndicator Bean对象 @ConditionalOnClass(HealthIndicator.class) public HealthIndicator rocketMQProducerHealthIndicator(Map&lt;String, DefaultMQProducer&gt; producers) { if (producers.size() == 1) { return new RocketMQProducerHealthIndicator(producers.values().iterator().next()); } } 7、@ConditionalOnMissingClass&emsp;&emsp;组合@Conditional注解，和@ConditionalOnMissingClass注解相反，当classpath中没有指定的 Class才开启配置。 8、@ConditionalOnWebApplication&emsp;&emsp;组合@Conditional 注解，当前项目类型是 WEB 项目才开启配置。当前项目有以下 3 种类型:ANY(任何Web项目都匹配)、SERVLET（仅但基础的Servelet项目才会匹配）、REACTIVE（只有基于响应的web应用程序才匹配）。 9、@ConditionalOnNotWebApplication&emsp;&emsp;组合@Conditional注解，和@ConditionalOnWebApplication 注解相反，当前项目类型不是 WEB 项目才开启配置。 10、@ConditionalOnProperty&emsp;&emsp;组合 @Conditional 注解，当指定的属性有指定的值时才开启配置。具体操作是通过其两个属性name以及havingValue来实现的，其中name用来从application.properties中读取某个属性值，如果该值为空，则返回false;如果值不为空，则将该值与havingValue指定的值进行比较，如果一样则返回true;否则返回false。如果返回值为false，则该configuration不生效；为true则生效。 @Bean //匹配属性rocketmq.producer.enabled值是否为true @ConditionalOnProperty(value = &quot;rocketmq.producer.enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true) public RocketMQProducer mqProducer() { return new RocketMQProducer(); } 11、@ConditionalOnExpression 组合 @Conditional 注解，当 SpEL 表达式为 true 时才开启配置。 @Configuration @ConditionalOnExpression(&quot;${enabled:false}&quot;) public class BigpipeConfiguration { @Bean public OrderMessageMonitor orderMessageMonitor(ConfigContext configContext) { return new OrderMessageMonitor(configContext); } } 12、@ConditionalOnJava&emsp;&emsp;组合@Conditional 注解，当运行的 Java JVM 在指定的版本范围时才开启配置。 13、@ConditionalOnResource&emsp;&emsp;组合 @Conditional 注解，当类路径下有指定的资源才开启配置 @Bean @ConditionalOnResource(resources=&quot;classpath:shiro.ini&quot;) protected Realm iniClasspathRealm(){ return new Realm(); } 14、@ConditionalOnJndi&emsp;&emsp;组合 @Conditional 注解，当指定的 JNDI 存在时才开启配置。 15、@ConditionalOnCloudPlatform&emsp;&emsp;组合 @Conditional 注解，当指定的云平台激活时才开启配置。 16、@ConditionalOnSingleCandidate&emsp;&emsp;组合 @Conditional 注解，当指定的 class 在容器中只有一个 Bean，或者同时有多个但为首选时才开启配置。 17、@ConfigurationProperties&emsp;&emsp;Spring Boot可使用注解的方式将自定义的properties文件映射到实体bean中，比如config.properties文件。 @Data @ConfigurationProperties(&quot;rocketmq.consumer&quot;) public class RocketMQConsumerProperties extends RocketMQProperties { private boolean enabled = true; private String consumerGroup; private MessageModel messageModel = MessageModel.CLUSTERING; private ConsumeFromWhere consumeFromWhere = ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET; private int consumeThreadMin = 20; private int consumeThreadMax = 64; private int consumeConcurrentlyMaxSpan = 2000; private int pullThresholdForQueue = 1000; private int pullInterval = 0; private int consumeMessageBatchMaxSize = 1; private int pullBatchSize = 32; } 18、@EnableConfigurationProperties&emsp;&emsp;当@EnableConfigurationProperties注解应用到你的@Configuration时，任何被@ConfigurationProperties注解的beans将自动被Environment属性配置。 这种风格的配置特别适合与SpringApplication的外部YAML配置进行配合使用。 @Configuration @EnableConfigurationProperties({ RocketMQProducerProperties.class, RocketMQConsumerProperties.class, }) @AutoConfigureOrder public class RocketMQAutoConfiguration { @Value(&quot;${spring.application.name}&quot;) private String applicationName; } 19、@AutoConfigureAfter&emsp;&emsp;用在自动配置类上面，表示该自动配置类需要在另外指定的自动配置类配置完之后。如 Mybatis 的自动配置类，需要在数据源自动配置类之后。 @AutoConfigureAfter(DataSourceAutoConfiguration.class) public class MybatisAutoConfiguration { } 20、@AutoConfigureBefore&emsp;&emsp;这个和@AutoConfigureAfter注解使用相反，表示该自动配置类需要在另外指定的自动配置类配置之前。 21、@AutoConfigureOrder&emsp;&emsp;Spring Boot 1.3.0中有一个新的注解@AutoConfigureOrder，用于确定配置加载的优先级顺序。 @AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE) // 自动配置里面的最高优先级 @Configuration @ConditionalOnWebApplication // 仅限于web应用 @Import(BeanPostProcessorsRegistrar.class) // 导入内置容器的设置 public class EmbeddedServletContainerAutoConfiguration { @Configuration @ConditionalOnClass({ Servlet.class, Tomcat.class }) @ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT) public static class EmbeddedTomcat { // ... } @Configuration @ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class }) @ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT) public static class EmbeddedJetty { // ... } } 本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～ 哇咔咔(∪｡∪)｡｡｡zzz","categories":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}],"tags":[{"name":"note","slug":"note","permalink":"/tags/note/"}],"keywords":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}]},{"title":"WebFilter注解的了解","slug":"2019-12-12-note-1","date":"2019-12-12T02:10:01.000Z","updated":"2019-12-20T07:31:47.374Z","comments":true,"path":"2019/12/12/2019-12-12-note-1/","link":"","permalink":"/2019/12/12/2019-12-12-note-1/","excerpt":"","text":"转载请注明作者和出处：https://blog.csdn.net/qq_37165235 操作系统：WINDOWS 10 软件版本：heo+next-5.1.4 编&emsp;&emsp;者：浅歌余生 一、@WebFilter详细说明@WebFilter &emsp;&emsp;@WebFilter 用于将一个类声明为==过滤器==，该注解将会在部署时被容器处理，容器将根据具体的属性配置将相应的类部署为过滤器。该注解具有下表给出的一些常用属性 ( 以下所有属性均为可选属性，但是 value、urlPatterns、servletNames 三者必需至少包含一个，且 value 和 urlPatterns 不能共存，如果同时指定，通常忽略 value 的取值 ) @WebFilter 的常用属性 属性名 类型 描述 filterName String 指定过滤器的 name 属性，等价于 value String[] 该属性等价于 urlPatterns 属性。但是两者不应该同事使用 urlPatterns String[] 指定一组过滤器的URL匹配模式。等价于 标签 servletNames String[] 指定过滤器将应用于哪些 servlet。取值是@webServlet中的name属性的取值，或者是web.xml中 取值 dispatcherTypers DispatcherType 指定过滤器的转发模式，具体取值包括：ASYNC、ERROR、FORWARD、INCLUDE、REQUEST。 initParams WebInitParam[] 指定一组过滤器初始化参数，等价于 标签 asyncSupported boolean 声明过滤器是否支持异步操作模式，等价于 标签 description String 该过滤器的描述信息，等价于 标签 displayName String 该过滤器的显示名，通常配合工具使用，等价于 标签 代码示例package com.xc.common.filter; import java.io.IOException; import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.FilterConfig; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.annotation.WebFilter; /** * @ClassName: FilterDemo01 * @Description:filter的三种典型应用： * 1、可以在filter中根据条件决定是否调用chain.doFilter(request, response)方法， 即是否让目标资源执行&lt;br/&gt; * 2、在让目标资源执行之前，可以对request\\response作预处理，再让目标资源执行 &lt;br/&gt; * 3、在目标资源执行之后，可以捕获目标资源的执行结果，从而实现一些特殊的功能 &lt;br/&gt; */ @WebFilter(filterName = &quot;FilterDemo01&quot;, urlPatterns = { &quot;/*&quot; }) public class FilterDemo01 implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { System.out.println(&quot;----FilterDemo01过滤器初始化----&quot;); } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { // 对request和response进行一些预处理 request.setCharacterEncoding(&quot;UTF-8&quot;); response.setCharacterEncoding(&quot;UTF-8&quot;); response.setContentType(&quot;text/html;charset=UTF-8&quot;); System.out.println(&quot;FilterDemo01执行前！！！&quot;); chain.doFilter(request, response); // 让目标资源执行，放行 System.out.println(&quot;FilterDemo01执行后！！！&quot;); } @Override public void destroy() { System.out.println(&quot;----过滤器销毁----&quot;); } } Filter的生命周期Filter的创建&emsp;&emsp;Filter的创建和销毁由WEB服务器负责。 web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作，filter对象只会创建一次，init方法也只会执行一次。通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。 Filter的销毁&emsp;&emsp;Web容器调用destroy方法销毁Filter。destroy方法在Filter的生命周期中仅执行一次。在destroy方法中，可以释放过滤器使用的资源。 FilterConfig接口&emsp;&emsp;用户在配置filter时，可以使用为filter配置一些初始化参数，当web容器实例化Filter对象，调用其init方法时，会把封装了filter初始化参数的filterConfig对象传递进来。因此开发人员在编写filter时，通过filterConfig对象的方法，就可获得： String getFilterName()：得到filter的名称。 String getInitParameter(String name)： 返回在部署描述中指定名称的初始化参数的值。如果不存在返回null. Enumeration getInitParameterNames()：返回过滤器的所有初始化参数的名字的枚举集合。 public ServletContext getServletContext()：返回Servlet上下文对象的引用。 范例：利用FilterConfig得到filter配置信息package com.xc.common.filter; import java.io.IOException; import java.util.Enumeration; import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.FilterConfig; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.annotation.WebFilter; import javax.servlet.annotation.WebInitParam; @WebFilter(filterName = &quot;FilterDemo02&quot;, urlPatterns = { &quot;/*&quot;} , initParams = { @WebInitParam(name = &quot;name&quot;, value = &quot;xc&quot;) , @WebInitParam(name = &quot;like&quot;, value = &quot;java&quot;) } ) public class FilterDemo02 implements Filter { /* * 过滤器初始化 * * @see javax.servlet.Filter#init(javax.servlet.FilterConfig) */ @Override public void init(FilterConfig filterConfig) throws ServletException { System.out.println(&quot;----FilterDemo02过滤器初始化----&quot;); // 得到过滤器的名字 String filterName = filterConfig.getFilterName(); // 得到在web.xml文件中配置的初始化参数 String initParam1 = filterConfig.getInitParameter(&quot;name&quot;); String initParam2 = filterConfig.getInitParameter(&quot;like&quot;); // 返回过滤器的所有初始化参数的名字的枚举集合。 Enumeration&lt;String&gt; initParameterNames = filterConfig.getInitParameterNames(); System.out.println(filterName); System.out.println(initParam1); System.out.println(initParam2); while (initParameterNames.hasMoreElements()) { String paramName = (String) initParameterNames.nextElement(); System.out.println(paramName); } } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { System.out.println(&quot;FilterDemo02执行前！！！&quot;); chain.doFilter(request, response); // 让目标资源执行，放行 System.out.println(&quot;FilterDemo02执行后！！！&quot;); } @Override public void destroy() { System.out.println(&quot;----过滤器销毁----&quot;); } }","categories":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}],"tags":[{"name":"note","slug":"note","permalink":"/tags/note/"}],"keywords":[{"name":"Note","slug":"Note","permalink":"/categories/Note/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2019-12-20T07:27:53.903Z","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"/2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}